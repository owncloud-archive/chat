describe('ConvController', function(){
	var $rootScope;
	var $scope;
	var controller;
	// The following variable is used to mock the initvar, which is generated by the Chat backend

	var convs = {
		convs: {},
		addConv: function(){},
		get: function(){},
		getHighestOrder: function(){},
		addChatMsg: function(){},
		replaceUsers: function(){},
		notifyMsgInConv: function(){},
		addUserToConv: function(){},
		getFirstConv: function(){},
		makeActive: function(){},
	};
	var och = {
		init : function(){},
		quit : function(){},
		sendChatMsg : function(convId, msg){},
		invite : function(convId, userToInvite, groupConv, callback){},
		newConv : function(userToInvite, success){}
	};
	var activeUser = {"id":"admin","online":true,"displayname":"admin","order":4,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""};
	var initvar = {"contacts":[{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},{"id":"derp","online":false,"displayname":"derp","order":2,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"derp"}},"address_book_id":"local","address_book_backend":""},{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":""}],"contactsList":["admin","derp","herp"],"contactsObj":{"admin":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"derp":{"id":"derp","online":false,"displayname":"derp","order":2,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"derp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00H"},"herp":{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00A"}},"backends":{"och":{"id":"och","enabled":true,"displayname":"ownCloud Chat","protocols":["x-owncloud-handle"],"config":{"file_attachments":true},"handle":{}}},"initConvs":{"och":{"CONV_ID_1414328639_48":{"id":"CONV_ID_1414328639_48","users":["derp","admin"],"backend":"och","messages":[{"id":2,"convid":"CONV_ID_1414328639_48","timestamp":1414328944,"user":"admin","msg":"iou"},{"id":3,"convid":"CONV_ID_1414328639_48","timestamp":1414328946,"user":"admin","msg":"fdg"},{"id":4,"convid":"CONV_ID_1414328639_48","timestamp":1414328946,"user":"admin","msg":"dfg"},{"id":5,"convid":"CONV_ID_1414328639_48","timestamp":1414328946,"user":"admin","msg":"dgfs"},{"id":6,"convid":"CONV_ID_1414328639_48","timestamp":1414328946,"user":"admin","msg":"dfgs"},{"id":7,"convid":"CONV_ID_1414328639_48","timestamp":1414329382,"user":"admin","msg":"test"},{"id":8,"convid":"CONV_ID_1414328639_48","timestamp":1414329384,"user":"admin","msg":"test"},{"id":9,"convid":"CONV_ID_1414328639_48","timestamp":1414329385,"user":"admin","msg":"test"},{"id":10,"convid":"CONV_ID_1414328639_48","timestamp":1414329485,"user":"admin","msg":"hoi"},{"id":11,"convid":"CONV_ID_1414328639_48","timestamp":1414329503,"user":"admin","msg":"hoi"},{"id":12,"convid":"CONV_ID_1414328639_48","timestamp":1414329511,"user":"admin","msg":"test"},{"id":13,"convid":"CONV_ID_1414328639_48","timestamp":1414329533,"user":"admin","msg":"test"},{"id":14,"convid":"CONV_ID_1414328639_48","timestamp":1414329557,"user":"admin","msg":"test"},{"id":15,"convid":"CONV_ID_1414328639_48","timestamp":1414329621,"user":"admin","msg":"test"},{"id":16,"convid":"CONV_ID_1414328639_48","timestamp":1414329622,"user":"admin","msg":"#"},{"id":17,"convid":"CONV_ID_1414328639_48","timestamp":1414329623,"user":"admin","msg":"fd"},{"id":18,"convid":"CONV_ID_1414328639_48","timestamp":1414329714,"user":"admin","msg":"adf"},{"id":19,"convid":"CONV_ID_1414328639_48","timestamp":1414329715,"user":"admin","msg":"asdf"},{"id":21,"convid":"CONV_ID_1414328639_48","timestamp":1414330362,"user":"admin","msg":"rfg"},{"id":22,"convid":"CONV_ID_1414328639_48","timestamp":1414330363,"user":"admin","msg":"f"},{"id":24,"convid":"CONV_ID_1414328639_48","timestamp":1414333188,"user":"admin","msg":"hoi123"},{"id":25,"convid":"CONV_ID_1414328639_48","timestamp":1414333204,"user":"derp","msg":"test"}],"files":[]},"CONV_ID_1414328640_25":{"id":"CONV_ID_1414328640_25","users":["herp","admin"],"backend":"och","messages":[{"id":1,"convid":"CONV_ID_1414328640_25","timestamp":1414328925,"user":"admin","msg":"hoi"},{"id":20,"convid":"CONV_ID_1414328640_25","timestamp":1414330331,"user":"admin","msg":"fg"},{"id":23,"convid":"CONV_ID_1414328640_25","timestamp":1414332635,"user":"admin","msg":"kl"}],"files":[]}}},"sessionId":"edab44ba6355916df9a5e95b3a619ac9"}
	var backends = initvar.backends;
	var $session;

	backends.och.handle = och;
	beforeEach(module('chat'));
	/**
	 * Create $scope and controller
	 * Mock all factories
	 */
	beforeEach(inject(function($controller, $rootScope, $injector){
		$session = $injector.get('session');
		$scope = $rootScope.$new();
		for(var key in backends) {
			var backend = backends[key];
			spyOn(backend.handle, 'init');
		}
		spyOn(convs, 'addConv');
		spyOn(convs, 'addChatMsg');
		controller = $controller('ConvController', {
			$scope: $scope,
			initvar: initvar,
			och : och,
			convs : convs,
			activeUser: activeUser,
			contacts: {
				'contacts' : initvar.contactsObj,
				getHighestOrder: function(){return 10;},
				markOnline: function(){},
				markOffline: function(){}
			},
			backends: backends,
			title: {
				updateTitle: function(){},
				getDefaultTitle: function(){},
				getTitle: function(){},
				notify: function(){},
				emptyNewMsgs: function(){}
			},
			session: $session
		});
	}));

	describe('Initialization', function () {
		it('Should attach convs.convs to $scope.convs', function () {
			expect($scope.convs).toEqual(convs.convs);
		});

		it('Should attach $session to $scope.$session', function () {
			expect($scope.$session).toEqual($session);
		});

		it('Should attach initConvs to $scope.initConvs', function () {
			expect($scope.initConvs).toEqual(initvar.initConvs);
		});

		it('Should attach initvar to $scope.initvar', function () {
			expect($scope.initvar).toEqual(initvar);
		});

		describe('Should call the init() method', function () {
			it('Should have called the init() function on every backend', function () {
				for(var key in backends) {
					var backend = backends[key];
					expect(backend.handle.init).toHaveBeenCalled();
				}
			});

			it('Should change $scope.initDone into true', function () {
				expect($scope.initDone).toBeTruthy();
			});

			it('Should call convs.addConv for every och initconvs', function () {
				for(var key in initvar.initConvs.och) {
					expect(convs.addConv).toHaveBeenCalled();
				}
			});

			it('Should call convs.addChatmsg for every chat msg in every och initConv', function () {
				for(var key in initvar.initConvs.och) {
					var conv = initvar.initConvs.och[key];
					for(var msgKey in conv.messages ) {
						//expect(convs.addChatMsg).toHaveBeenCalled();
					}
				}

			});

		});
	});

	describe('$scope.view', function () {
		describe('inviteClick', function () {
			it('Should set $scope.view.elements.invite to false when it was true ', function () {
				$scope.view.elements.invite = false;
				$scope.view.inviteClick();
				expect($scope.view.elements.invite).toBeTruthy();
			});
			it('Should set $scope.view.elements.invite to true when it was false ', function () {
				$scope.view.elements.invite = true;
				$scope.view.inviteClick();
				expect($scope.view.elements.invite).toBeFalsy();

			});
		});
		describe('showEmojiPopover', function () {
			it('Should set $scope.view.elements.emojiContainer to false when it was true ', function () {
				$scope.view.elements.emojiContainer = false;
				$scope.view.showEmojiPopover();
				expect($scope.view.elements.emojiContainer).toBeTruthy();
			});
			it('Should set $scope.view.elements.emojiContainer to true when it was false ', function () {
				$scope.view.elements.emojiContainer = true;
				$scope.view.showEmojiPopover();
				expect($scope.view.elements.emojiContainer).toBeFalsy();
			});
		});
		describe('show', function () {
			it('Should set $scope.view.elements[element] to true', function () {
				$scope.view.elements.dummy = false;
				$scope.view.show('dummy');
				expect($scope.view.elements.dummy).toBeTruthy();

				$scope.view.elements.dummy = true;
				$scope.view.show('dummy');
				expect($scope.view.elements.dummy).toBeTruthy();
				expect($scope.view.elements.dummy).toBeTruthy();

				$scope.view.elements.dummy = null;
				$scope.view.show('dummy');
				expect($scope.view.elements.dummy).toBeTruthy();
			});

			it('Should NOT set $scope.view.elements[element] to true when $event.target.classList contains exception', function () {
				$scope.view.elements.dummy = 'test';
				var $event = {
					target: {
						classList: {
							contains: function(property){
								return true;
							}
						}
					}
				};
				var exception = 'foo';
				$scope.view.show('dummy', $event, exception);
				expect($scope.view.elements.dummy).toEqual('test');
			});

			it('Should set $scope.view.elements[element] to true when $event.target.classList doesn\'t contains exception', function () {
				$scope.view.elements.dummy = false;
				var $event = {
					target: {
						classList: {
							contains: function(property){
								return false;
							}
						}
					}
				};
				var exception = 'foo';
				$scope.view.show('dummy', $event, exception);
				expect($scope.view.elements.dummy).toBeTruthy();
			});
		});
		describe('hide', function () {
			it('Should set $scope.view.elements[element] to false', function () {
				$scope.view.elements.dummy = false;
				$scope.view.hide('dummy');
				expect($scope.view.elements.dummy).toBeFalsy();

				$scope.view.elements.dummy = true;
				$scope.view.hide('dummy');
				expect($scope.view.elements.dummy).toBeFalsy();

				$scope.view.elements.dummy = null;
				$scope.view.hide('dummy');
				expect($scope.view.elements.dummy).toBeFalsy();
			});

			it('Should NOT touch $scope.view.elements[element]  when $event.target.classList contains an element of exception', function () {
				$scope.view.elements.dummy = 'test';
				var $event = {
					target: {
						classList: {
							contains: function(property){
								if(property === 'foo') {
									return true;
								} else {
									return false;
								}
							}
						}
					}
				};
				$scope.view.hide('dummy', $event, ['foo', 'bar']);
				expect($scope.view.elements.dummy).toEqual('test');
			});

			it('Should set $scope.view.elements[element] to false when $event.target.classList doesn\'t contains an element of exception', function () {
				$scope.view.elements.dummy = true;
				var $event = {
					target: {
						classList: {
							contains: function(property){
								return false;
							}
						}
					}
				};
				var exception = 'foo';
				$scope.view.hide('dummy', $event, exception);
				expect($scope.view.elements.dummy).toBeFalsy();
			});
		});
		describe('makeActive', function () {
			var $event = {
				target: {
					classList: {
						contains: function(property){
							return true;
						}
					}
				}
			};
			it('Should show chat and pass $even and exception', function () {
				spyOn($scope.view, 'show');
				spyOn(convs, 'get').and.returnValue({'new_msg' : true});
				$scope.view.makeActive('conv-id', $event, 'exception');
				expect($scope.view.show).toHaveBeenCalledWith('chat', $event, 'exception');
			});

			it('Should call $scope.view.focusMsgInput', function () {
				spyOn($scope.view, 'focusMsgInput');
				spyOn(convs, 'get').and.returnValue({'new_msg' : true});
				$scope.view.makeActive('conv-id', $event, 'exception');
				expect($scope.view.focusMsgInput).toHaveBeenCalled();
			});

			it('Should set $scope.active.conv to convId', function () {
				var convId = '34q1235k452345234523452efsdg234523434edgasdg';
				spyOn(convs, 'get').and.returnValue({'new_msg' : true});
				$scope.view.makeActive(convId, $event, 'exception');
				expect($session.conv).toEqual(convId);
				expect($scope.$session.conv).toEqual(convId);
			});

			it('Should set new_msg to false of the conv', function () {
				var conv = {'new_msg' : true};
				spyOn(convs, 'get').and.returnValue(conv);
				$scope.view.makeActive('conv-id', $event, 'exception');
				expect(conv.new_msg).toBeFalsy();
			});
		});
		describe('unActive', function () {
			it('Should set $scope.active.conv to null', function () {
				$scope.view.unActive();
				expect($session.conv).toEqual(null);
				expect($scope.$session.conv).toEqual(null);
			});
		});

		describe('showFilePicker', function(){
			it('Should call OCdialogs.filepicker', function(){
				spyOn(OCdialogs, 'filepicker');
				$scope.view. showFilePicker();
				expect(OCdialogs.filepicker).toHaveBeenCalled();
			});
		});
	});

	describe('sendChatMsg', function () {
		it('Should do nothing when $scope.fields.chatMsg is null', function () {
			convs.addChatMsg.calls.reset();
			$scope.fields.chatMsg = null;
			$scope.sendChatMsg();
			expect(convs.addChatMsg.calls.count()).toEqual(0);
		});

		it('Should do nothing when $scope.fields.chatMsg is \'\'', function () {
			convs.addChatMsg.calls.reset();
			$scope.fields.chatMsg = '';
			$scope.sendChatMsg();
			expect(convs.addChatMsg.calls.count()).toEqual(0);
		});

		it('Should call the convs.addChatMsg with the active.conv, active.user, fields.chatmsg. Time.now() and the backend', function () {
			convs.addChatMsg.calls.reset();
			$conv = {"id":"CONV_ID_1414328640_25","users":[{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00A"},{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}],"msgs":[{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"hoi","timestamp":1414328925,"time":{"hours":14,"minutes":"08","seconds":45},"$$hashKey":"01Y"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"fg","timestamp":1414330331,"time":{"hours":14,"minutes":"32","seconds":11},"$$hashKey":"01Z"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"kl","timestamp":1414332635,"time":{"hours":15,"minutes":"10","seconds":35},"$$hashKey":"020"}],"backend":{"id":"och","enabled":true,"displayname":"ownCloud Chat","protocols":["x-owncloud-handle"],"config":{"file_attachments":true},"handle":{}},"new_msg":false,"raw_msgs":[{"msg":"hoi","timestamp":1414328925,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"fg","timestamp":1414330331,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"kl","timestamp":1414332635,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}}],"order":52,"name":"herp ","files":[],"$$hashKey":"003"};
			$chatMsg = 'Lipsum Lorepsem Derpy Test Message!';
			$scope.$session.conv = $conv.id;
			$scope.$session.user = activeUser;
			$scope.fields.chatMsg = $chatMsg;
			spyOn(Time, 'now').and.returnValue(32452135213);
			spyOn(convs, 'get').and.returnValue($conv);
			$scope.sendChatMsg();
			expect(convs.addChatMsg).toHaveBeenCalledWith($conv.id, $scope.$session.user, $chatMsg, 32452135213, 'och' );
		});

		it('Should call the sendChatMsg on the handle of the active backend with the active.conv and fields.chatMsg', function () {
			spyOn(backends.och.handle, 'sendChatMsg');
			$conv = {"id":"CONV_ID_1414328640_25","users":[{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00A"},{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}],"msgs":[{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"hoi","timestamp":1414328925,"time":{"hours":14,"minutes":"08","seconds":45},"$$hashKey":"01Y"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"fg","timestamp":1414330331,"time":{"hours":14,"minutes":"32","seconds":11},"$$hashKey":"01Z"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"kl","timestamp":1414332635,"time":{"hours":15,"minutes":"10","seconds":35},"$$hashKey":"020"}],"backend":{"id":"och","enabled":true,"displayname":"ownCloud Chat","protocols":["x-owncloud-handle"],"config":{"file_attachments":true},"handle":{}},"new_msg":false,"raw_msgs":[{"msg":"hoi","timestamp":1414328925,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"fg","timestamp":1414330331,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"kl","timestamp":1414332635,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}}],"order":52,"name":"herp ","files":[],"$$hashKey":"003"};
			$chatMsg = 'Lipsum Lorepsem Derpy Test Message!';
			$scope.$session.conv = $conv.id;
			$scope.$session.user = activeUser;
			$scope.fields.chatMsg = $chatMsg;
			spyOn(Time, 'now').and.returnValue(32452135213);
			spyOn(convs, 'get').and.returnValue($conv);
			$scope.sendChatMsg();
			expect(backends.och.handle.sendChatMsg).toHaveBeenCalledWith($conv.id, $chatMsg);
		});

		it('Should set $scope.fields.chatMsg to \'\'', function () {
			$conv = {"id":"CONV_ID_1414328640_25","users":[{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00A"},{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}],"msgs":[{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"hoi","timestamp":1414328925,"time":{"hours":14,"minutes":"08","seconds":45},"$$hashKey":"01Y"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"fg","timestamp":1414330331,"time":{"hours":14,"minutes":"32","seconds":11},"$$hashKey":"01Z"},{"contact":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"msg":"kl","timestamp":1414332635,"time":{"hours":15,"minutes":"10","seconds":35},"$$hashKey":"020"}],"backend":{"id":"och","enabled":true,"displayname":"ownCloud Chat","protocols":["x-owncloud-handle"],"config":{"file_attachments":true},"handle":{}},"new_msg":false,"raw_msgs":[{"msg":"hoi","timestamp":1414328925,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"fg","timestamp":1414330331,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}},{"msg":"kl","timestamp":1414332635,"user":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Chat","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""}}],"order":52,"name":"herp ","files":[],"$$hashKey":"003"}
			$chatMsg = 'Lipsum Lorepsem Derpy Test Message!';
			$scope.$session.conv = $conv.id;
			$scope.$session.user = activeUser;
			$scope.fields.chatMsg = $chatMsg;
			spyOn(Time, 'now').and.returnValue(32452135213);
			spyOn(convs, 'get').and.returnValue($conv);
			$scope.sendChatMsg();
			expect($scope.fields.chatMsg).toEqual('');
		});

		it('Should set the order of every contacts inside the active.conv to +1 of the current highest order', function () {

		});

	});
});